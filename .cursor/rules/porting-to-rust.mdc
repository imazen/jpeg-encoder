---
description: 
globs: 
alwaysApply: true
---
*(This file is managed by an AI, please describe desired changes.)*
# Rules for porting the C++ jpegli encoder algorithms to the Rust jpeg-encoder crate (workspace root)

Use cargo test

Be ABSOLUTELY MINIMAL in making changes outside of the src/jpegli/ directory, we want to preserve the jpeg-encoder API and make as few changes as needed to support the jpegli algorithm. Do NOT make tests pass by skipping or commenting them out. Be CORRECT. 

And if changes fail to apply, reload files from disk since they must have been applied early. 

1. The jpegli encoder source is in @jpegli/lib/jpegli jpegli/lib/jpegli
2. external/rust-lcms2 is the source for lcms2, and @lcms.md has info. external/image-png and external/image are useful for loading png files, if you lack utility functions for that. We have docs indexed for most crates we use. 
3. We target stable Rust, and keep any unsafe code (like SIMD abstractions) simple; study jpeg-encoder and follow those patterns. Auto-vectorization is the goal, so .
4. Before porting a C++ component, we examine all the headers it references and build a list of all the functions it actually depends on, and add that info as comments in the C++ header.
5. We work methodically, search for a replacement in jpeg-encoder or create one, and try to create idomatic but performant and correct solutions. 
6. We add new rules when we glean insight about jpegli, its structure, organization
7. We add rules whenever we establish a mapping from a C++ component to a rust component, including function signatures.
8. We always port tests and run them regularly.
9. Create new functions, and don't delete existing quanitzation tables or methods. We want to be able to compare and benchmark new and old, side by side. 
10. We put testdata images in reference_dct/testdata/, see referenced_dct/dct.sh for ones we found most useful. 


## Rule 9: Dependencies of jpegli/lib/jpegli/encode.cc

The main encoder implementation in `jpegli/lib/jpegli/encode.cc` depends on the following headers (relative to the jpegli subdir)

*   **C API:** `jpegli/lib/jpegli/encode.h`
*   **Standard Libraries:** `<algorithm>`, `<cstddef>`, `<cstdint>`, `<cstring>`, `<vector>`
*   **Jpegli Base:** `jpegli/lib/base/types.h`
*   **Jpegli Common:** `jpegli/lib/jpegli/common.h`, `jpegli/lib/jpegli/common_internal.h`, `jpegli/lib/jpegli/types.h`, `jpegli/lib/jpegli/error.h`, `jpegli/lib/jpegli/memory_manager.h`, `jpegli/lib/jpegli/simd.h`
*   **Jpegli Encoding Stages:**
    *   `jpegli/lib/jpegli/input.h`
    *   `jpegli/lib/jpegli/color_transform.h`
    *   `jpegli/lib/jpegli/downsample.h`
    *   `jpegli/lib/jpegli/adaptive_quantization.h`
    *   `jpegli/lib/jpegli/quant.h`
    *   `jpegli/lib/jpegli/entropy_coding.h`
    *   `jpegli/lib/jpegli/huffman.h`
    *   `jpegli/lib/jpegli/bitstream.h`, `jpegli/lib/jpegli/bit_writer.h`
    *   `jpegli/lib/jpegli/encode_streaming.h`, `jpegli/lib/jpegli/encode_finish.h`
*   **Internal Helpers:** `jpegli/lib/jpegli/encode_internal.h`

These represent the primary modules involved in the JPEG encoding process within jpegli.


## Jpegli Algorithmic Differences vs. Standard libjpeg-turbo

Based on our analysis of the `jpegli` encoder source code and its API (`encode.h`, `encode.cc`), here are some key algorithmic differences compared to a standard `libjpeg-turbo` implementation:

1.  **Adaptive Quantization:** Jpegli implements and enables *adaptive quantization* by default (`jpegli_enable_adaptive_quantization`, `ComputeAdaptiveQuantField`). This means it analyzes local image features (like edges and textures) and adjusts the quantization strength accordingly, aiming to preserve detail where it's visually important and save bits where it's not. Standard libjpeg uses non-adaptive quantization unless specific extensions (like Trellis quantization, often slower) are enabled.
2.  **Psychovisually Tuned Quantization Tables & Distance Metric:** Jpegli uses different default quantization tables than the standard Annex K tables used by libjpeg-turbo. These tables are likely derived from psychovisual modeling (related to the Butteraugli metric). Instead of just a `quality` factor (0-100), jpegli allows setting a target *Butteraugli distance* (`jpegli_set_distance`) which provides a more perceptually uniform measure of image quality/difference. While `jpegli_set_quality` exists for compatibility, it maps to an underlying distance. Libjpeg-turbo's quality setting directly scales the standard tables. Jpegli *can* use the standard tables if requested (`jpegli_use_standard_quant_tables`).
3.  **XYB Color Space Option:** Jpegli offers the option to use the perceptually optimized XYB color space (`jpegli_set_xyb_mode`) derived from JPEG XL. This can lead to better compression efficiency compared to the traditional YCbCr color space used by default in libjpeg-turbo for color images.
4.  **Default DCT Method:** Jpegli seems to default to a floating-point DCT (`cinfo->dct_method = JDCT_FLOAT;` in `InitializeCompressParams`). While libjpeg-turbo *supports* float DCT, its default and often faster options are integer DCTs (`JDCT_ISLOW`, `JDCT_IFAST`).
5.  **Different Defaults:** Jpegli uses different defaults for parameters like progressive scan scripts (`jpegli_set_progressive_level`, `SetDefaultScanScript`) aiming for potentially better compression or perceived quality out-of-the-box.

**In summary:** While `jpegli` maintains API compatibility with `libjpeg-turbo`, its internal algorithms are significantly enhanced with techniques focused on psychovisual optimization. It leverages adaptive quantization, perceptually derived quantization tables (Butteraugli-based), and the XYB color space to achieve higher quality compression for a given file size compared to standard JPEG encoders like `libjpeg-turbo`, often at comparable or slightly slower speeds depending on the features used.


## `jpeg-encoder` Crate Structure & Reusability Analysis

Okay, based on the analysis of the `jpeg-encoder` crate's source code (`lib.rs`, `encoder.rs`, and other modules), here's an outline of its structure and an assessment of what can be reused for porting `jpegli`:

**Structure of `jpeg-encoder`:**

1.  **Main Entry Point (`lib.rs`, `encoder.rs`):**
    *   Defines the public API (`Encoder`, `ColorType`, `SamplingFactor`, etc.).
    *   The `Encoder` struct acts as the central orchestrator, holding configuration (quality, sampling, tables, progressive settings, writer) and managing the encoding process.
    *   Provides constructors (`new`, `new_file`) and configuration methods (`set_sampling_factor`, `set_quantization_tables`, `set_progressive`, etc.).
    *   The main `encode` and `encode_image` methods handle input validation, SIMD dispatch (using the `Operations` trait), and delegate to specific encoding routines.

2.  **Input Handling (`image_buffer.rs`):**
    *   Defines the `ImageBuffer` trait to abstract different input image formats (Grayscale, RGB, RGBA, CMYK, etc.).
    *   Provides concrete implementations for common color types.
    *   Includes color conversion logic (e.g., `rgb_to_ycbcr`, `cmyk_to_ycck`) needed for standard JPEG encoding.

3.  **Core JPEG Stages (Separate Modules):**
    *   **FDCT (`fdct.rs`):** Implements the Forward Discrete Cosine Transform. Likely a standard floating-point or integer version.
    *   **Quantization (`quantization.rs`):** Defines `QuantizationTable` and `QuantizationTableType`. Handles creating tables based on quality (scaling standard Annex K tables) or using custom tables.
    *   **Huffman Coding (`huffman.rs`, `writer.rs`):**
        *   `huffman.rs`: Defines `HuffmanTable`, provides default tables (Annex K), and includes logic (`optimize_huffman_table` in `encoder.rs`) to build optimized tables based on coefficient frequencies.
        *   `writer.rs`: Contains the logic within `JfifWriter` to actually encode the quantized DCT coefficients using the selected Huffman tables and write them to the bitstream.
    *   **Writing (`writer.rs`):**
        *   Defines the `JfifWrite` trait for output abstraction.
        *   `JfifWriter` handles writing all JPEG markers (SOI, EOI, SOF, DQT, DHT, SOS, DRI, RST, APPn) and manages the bitstream buffering.

4.  **Encoding Modes (`encoder.rs`):**
    *   Implements different encoding strategies based on configuration:
        *   `encode_image_interleaved`: Baseline encoding where all component data for an MCU is written together (requires compatible sampling factors).
        *   `encode_image_sequential`: Baseline encoding where each component is written in a separate scan. Used for incompatible sampling or when optimization is enabled.
        *   `encode_image_progressive`: Progressive encoding using spectral selection across multiple scans.

5.  **SIMD Optimization (`avx2.rs`, `encoder.rs`):**
    *   Uses the `Operations` trait to abstract potential SIMD implementations (currently AVX2).
    *   Provides optimized versions of FDCT and potentially color conversion (`RgbImageAVX2`, etc. in `encoder.rs`).

**Reusability for Porting `jpegli`:**

*   **High Reusability:**
    *   **Overall Crate Structure:** The modular design separating concerns (encoder, writer, fdct, quantization, huffman, image buffer) is a solid foundation.
    *   **`Encoder` Struct & API:** The main `Encoder` struct and its configuration methods (`set_sampling_factor`, `set_progressive`, `add_app_segment`, etc.) provide a good starting point for the user-facing API.
    *   **Marker Writing (`writer.rs`):** The logic for writing standard JPEG markers (SOI, SOF, DQT, DHT, SOS, APPn, etc.) and the bitstream writing infrastructure (`JfifWriter`) are directly applicable and highly reusable.
    *   **Input Abstraction (`image_buffer.rs`):** The concept of the `ImageBuffer` trait is valuable for handling different input types.
    *   **SIMD Abstraction (`Operations` trait):** The pattern of using a trait to abstract SIMD implementations is good and can be adapted for jpegli's specific SIMD code.
    *   **Basic Huffman Infrastructure (`huffman.rs`):** Storing Huffman tables and the basic structure for encoding AC/DC coefficients is standard.

*   **Medium Reusability / Needs Modification:**
    *   **Quantization (`quantization.rs`):** The `QuantizationTable` struct itself is fine, but the core logic needs replacement. Instead of scaling standard tables based on a 0-100 quality, we need to implement `jpegli`'s psychovisually tuned default tables and its Butteraugli distance-based scaling. The `QuantizationTableType` enum might need adjustment.
    *   **FDCT (`fdct.rs`):** `jpegli` defaults to `JDCT_FLOAT`. We need to ensure the implementation matches `jpegli`'s requirements (precision, potentially specific float algorithm) or replace it. The existing `Operations` trait can help integrate `jpegli`'s SIMD FDCT.
    *   **Color Conversion (`image_buffer.rs`):** Existing conversions (RGB->YCbCr) might be reusable *if* XYB mode isn't used. Needs extension/modification to support the XYB color transform (`jpegli_set_xyb_mode`).
    *   **Huffman Optimization (`encoder.rs::optimize_huffman_table`):** If `jpegli` uses a different strategy than simple frequency counting for optimized tables, this logic needs modification/replacement. Default Huffman tables might also differ.
    *   **Encoding Loop Logic (`encoder.rs`):** The loops in `encode_image_interleaved`, `encode_image_sequential`, etc., provide a skeleton but will need significant changes to integrate adaptive quantization.

*   **Low Reusability / Needs Replacement / New Components:**
    *   **Core Quantization Logic:** The standard quality->scaling mechanism in `quantization.rs` must be replaced with `jpegli`'s distance-based psychovisual quantization model.
    *   **Adaptive Quantization:** This is a major `jpegli` feature currently absent. We need to implement the logic for:
        *   Analyzing the input image (likely after color transform/downsampling).
        *   Calculating masking/activity.
        *   Generating the per-block quantization multiplier field (`ComputeAdaptiveQuantField`).
        *   Applying this field during the quantization step. This will likely require a new module and modifications to the main encoding loop.
    *   **XYB Color Transform:** Logic for converting to/from XYB color space needs to be added, likely within the `image_buffer.rs` structure or a dedicated module.
    *   **Jpegli Defaults:** Default settings (quantization tables, Huffman tables, progressive scan scripts, sampling factors based on quality/distance) need to be updated to match `jpegli`.

**In Summary:**

The `jpeg-encoder` crate provides a well-structured foundation with reusable components for file writing, marker handling, API design, and SIMD abstraction. However, the core algorithmic parts – particularly **quantization (psychovisual tuning and adaptive quantization)** and **color transformation (XYB)** – which are the key differentiators of `jpegli`, will need to be ported and integrated, replacing or significantly modifying the existing standard JPEG logic in those areas.


## Migration Plan & Current Status (Phase 1-4 Focused)

**Phase 1: API and Data Setup**

*   **[DONE]** API Modification (`src/encoder.rs`, `lib.rs`):
    *   Added `Encoder::set_jpegli_distance(&mut self, distance: f32)` API.
    *   Implemented `quality_to_distance` helper (`src/quantization.rs`).
    *   Internal logic uses distance when set.
*   **[DONE]** Embed Jpegli Default Quantization Tables (`src/quantization.rs`):
    *   `JPEGLI_DEFAULT_LUMA_QTABLE_F32` and `JPEGLI_DEFAULT_CHROMA_QTABLE_F32` constants defined.
*   **[DONE]** Refine `QuantizationTableType` (`src/quantization.rs`):
    *   Added `JpegliDefault` variant.
    *   `set_jpegli_distance` implicitly uses this logic path now.

**Phase 2: Core Logic Implementation**

*   **[DONE]** Implement Jpegli Distance Scaling (`src/quantization.rs`):
    *   Ported logic from `jpegli` (`quant.cc`) for scaling based on distance (using `distance_to_scale` helper).
    *   Implemented in `QuantizationTable::new_with_jpegli_distance`, using the embedded `JPEGLI_DEFAULT_*` tables.

**Phase 3: Integration**

*   **[DONE]** Update `Encoder` Logic (`src/encoder.rs`):
    *   `encode_image_internal` correctly selects between standard quality scaling (`new_with_quality`) and Jpegli distance scaling (`new_with_jpegli_distance`).
    *   `set_quality` resets the mode to standard.
    *   `set_jpegli_distance` sets the mode to Jpegli distance.

**Phase 4: Testing**

*   **[DONE]** Unit Tests (`src/quantization.rs`):
    *   Tested `quality_to_distance`.
    *   Tested `new_with_jpegli_distance` against internally recalculated expected values for distance 1.0.
*   **[DONE]** Integration Tests (`src/encoder.rs`):
    *   Added smoke tests for various configurations (`test_encode_default`, `test_encode_jpegli_distance`, etc.).
    *   Most paths pass basic execution checks (don't panic), **except float DCT path**.

**Additional Features & Status:**

*   **Zero-Bias Quantization:**
    *   **[DONE]** Ported `K_ZERO_BIAS_*` constants (`src/quantization.rs`).
    *   **[DONE]** Implemented `compute_zero_bias_tables` based on distance (`src/quantization.rs`).
    *   **[DONE]** Integrated zero-bias thresholding into quantization (`quantize_block`, `quantize_float_block` in `src/encoder.rs`).
*   **Adaptive Quantization (AQ):**
    *   **[DONE]** Added `Encoder::set_adaptive_quantization` flag.
    *   **[IN PROGRESS]** Implemented skeleton `compute_adaptive_quant_field` (`src/adaptive_quantization.rs`) mirroring `jpegli`'s structure (PreErosion, FuzzyErosion, PerBlockModulations).
    *   **[IN PROGRESS]** Internal AQ calculations use scalar approximations or placeholders; output does not match `jpegli` precisely yet. Several helper functions (`gaussian_kernel`, `convolve_*`, etc.) are present but currently unused pending full implementation.
    *   **[DONE]** Integration: AQ field is passed to quantization functions (`quantize_block`, `quantize_float_block`).
    *   **[LEARNING]** AQ likely requires full image buffering to compute the `quant_field`, matching `jpegli`'s probable behavior.
*   **Float DCT:**
    *   **[DONE]** Added `Encoder::set_float_dct` flag.
    *   **[DONE]** Ported scalar version of `jpegli`'s float DCT (`TransformFromPixels` logic) to `forward_dct_float` and helpers in `src/fdct.rs`.
    *   **[DONE]** Integrated into encoding loops (`encode_blocks`, `encode_image_interleaved`) via `Operations` trait, selectable by the flag.
    *   **[BLOCKED]** Tests enabling float DCT (`test_encode_float_dct`, etc.) panic with an index out-of-bounds error (index 56, len 32) inside `fdct::b`. The root cause is unclear after several debugging attempts (checking slice lengths, call order, removing inlining). Float DCT path is currently unusable.
*   **XYB Color Space:**
    *   **[NOT STARTED]**
*   **HDR Input (`f32`/`u16`):**
    *   **[NOT STARTED]** Encoder currently expects `u8` input.
    *   **[LEARNING]** `jpegli` C API also likely expects `u8`; pre-scaling/conversion would be needed in Rust entry points.
*   **Streaming:**
    *   **[PARTIAL]** Core encoding stages (`encode_image_interleaved`) process MCU rows (8/16 scanlines).
    *   **[BLOCKED by AQ]** Enabling AQ forces full image buffering due to the nature of `compute_adaptive_quant_field`. True streaming is only possible if AQ is disabled.

**Relevant Files Map:**

| Feature                     | Jpegli Source (`jpegli/lib/jpegli/`)        | Jpeg-Encoder Target (`src/`) | Status Notes                     |
| :-------------------------- | :----------------------------------- | :---------------------------------------- | :------------------------------- |
| Quantization (Base Tables)  | `quant.cc`                           | `quantization.rs` (Constants)             | DONE                             |
| Quantization (Distance)   | `quant.cc`                           | `quantization.rs`                         | DONE                             |
| Quantization (Zero Bias)  | `quant.cc`                           | `quantization.rs`                         | DONE                             |
| Adaptive Quantization     | `adaptive_quantization.cc/.h`        | `adaptive_quantization.rs`                | IN PROGRESS (Scalar/Placeholders)|
| Float DCT                   | `dct-inl.h`                          | `fdct.rs`                                 | BLOCKED (Test panic)             |
| Encoder API/Logic         | `encode.cc/.h`                       | `encoder.rs`, `lib.rs`                    | DONE (for ported features)       |
| Encoding Loop Integration | `encode_streaming.cc`, `encode.cc` | `encoder.rs`                              | DONE (for ported features)       |
| Color Transform (YCbCr)   | `color_transform.cc/.h`              | `image_buffer.rs`                         | Mostly reusable                  |
| Color Transform (XYB)     | `color_transform.cc/.h`              | *(Not implemented)*                       | NOT STARTED                      |
| Input Handling              | `input.cc/.h`                        | `image_buffer.rs`                         | Needs extension for HDR          |

This provides a comprehensive overview of the progress and outstanding issues.
